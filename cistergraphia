#!/usr/bin/env ruby

require 'nokogiri'
require 'pry'
require_relative 'lib/cistergraphia'

def get_message(message = nil)
  if message
    message
  else
    print 'What is your message? '
    gets
  end
end

message = get_message
sequence = Cistergraphia.cister(message)
Cistergraphia.inject_evil_symbols(sequence) until Cistergraphia.perfect_square?(sequence.size)

path = 'tmp/inline.svg'
y = Cistergraphia::PADDING  # Start with padding
width, height, cols, rows = Cistergraphia.calculate_dimensions(sequence)

builder = Nokogiri::XML::Builder.new do |doc|
  doc.svg(
    'xmlns' => 'http://www.w3.org/2000/svg',
    'version' => '1.1',
    'width' => width,
    'height' => height,
    'viewBox' => "0 0 #{width} #{height}",
    'style' => 'background-color: white'
  ) do
    # Add a white background rectangle
    doc.rect(
      'width' => '100%',
      'height' => '100%',
      'fill' => 'white'
    )
    
    sequence.map { |s| Cistergraphia.digits(s) }
            .each_slice(cols) do |slice|
              slice.each_with_index { |s, i| Cistergraphia.symbol(doc, s, i, y) }
              y += Cistergraphia::SYMBOL_HEIGHT + Cistergraphia::SPACE
            end
  end
end

# Format the XML properly before writing
formatted_xml = builder.to_xml(
  encoding: 'UTF-8',
  indent: 2,
  indent_text: ' '
)

File.open(path, 'w') { |f| f.write(formatted_xml) }

# Display with chafa if available
system("chafa #{path}") if system("which chafa >/dev/null 2>&1")

# Update PNG conversion to maintain aspect ratio
system("convert tmp/inline.svg tmp/output.png")
